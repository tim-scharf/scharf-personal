anyNA(X$Ret_MinusOne)
X$Ret_MinusTwo
sd(X$Ret_MinusTwo)
sd(X$Ret_2)
sd(X$Ret_2,na.rm = T)
.0282/.0009
dim(X)
names(X)
M
dim(M)
X$Weight_Daily
X$Weight_Intraday
M
colsums(abs(M))
colSums(abs(M))
z  = rowSums(abs(M))
z
length(z)
z  = rowSums(abs(M),na.rm = T)
z
plot(z)
length(z)
hw = X$Weight_Intraday
dw = X$Weight_Daily
rm(hw)
wi = X$Weight_Intraday
rm(dw)
wd = X$Weight_Daily
z * wi
length(z * wi)
mean(z * wi)
X$Ret_PlusOne
abs(X$Ret_PlusOne)
X[ ,abs( Ret_MinusTwo)*  Weight_Daily]
X[ ,mean(abs( Ret_MinusTwo)*  Weight_Daily)]
X[ ,mean(abs( Ret_MinusOne)*  Weight_Daily)]
X[ ,mean( Ret_MinusOne))]
X[ ,mean( Ret_MinusOne)]
X[ ,mean( Ret_PlusOne)]
X[ ,mean( Ret_PlusOne)]
X[ ,mean( abs(Ret_PlusOne)* Weight_Daily)]
X[ ,mean( abs(Ret_PlusOne)* Weight_Daily)]
X[ ,mean( abs(Ret_PlusTwo)* Weight_Daily)]
X[ ,mean(abs(Ret_PlusOne))]
X[ ,mean(abs(Ret_PlusTwo))]
X$Weight_Daily
mean(X$Weight_Daily)
X[, abs(Ret_PlusOne)]
X[, mean(abs(Ret_PlusOne))]
X[, mean(abs(Ret_PlusOne))]
X[, mean(abs(Ret_PlusOne) * Weight_Daily)]
X[, mean(abs(Ret_PlusTwo) * Weight_Daily)]
dim(M)
names(X)
207-147
M = X[,147:207,with=F]
M
dim(M)
colnames(M)
M = X[,148:207,with=F]
dim(M)
X[,Ret_PlusOne]
X[,Ret_PlusOne* Weight_Daily]
X[,sum(abs(Ret_PlusOne* Weight_Daily))]
X[,mean(abs(Ret_PlusOne* Weight_Daily))]
X[,mean(abs(Ret_PlusTwo* Weight_Daily))]
cols
cols[120]
cols[120:18-]
cols[120:180]
cols[119:180]
cols[119:179]
cols[119:179]
tc = cols[119:179]
X[,.SD * Weight_Intraday, .SDcols=tc]
X[,Weight_Intraday, .SDcols=tc]
X[,.SD*Weight_Intraday, .SDcols=tc]
X[,.SD, .SDcols=tc]
M=as.matrix(X[,.SD, .SDcols=tc])
M
dim(M)
cols[119:179]
length(cols[119:179])
length(cols[120:179])
tc = cols[120:179]
M=as.matrix(X[,.SD, .SDcols=tc])
dim(M)
M * X$Weight_Intraday
M*X$Weight_Intraday
dim(M*X$Weight_Intraday)
hist(M*X$Weight_Intraday)
hist(M*X$Weight_Intraday,100)
mean(abs(M*X$Weight_Intraday,100))
mean(abs(M*X$Weight_Intraday))
X[,Ret_PlusOne * Weight_Daily]
x1 = abs(X[,Ret_PlusOne * Weight_Daily])
x1
x2 = abs(X[,Ret_PlusTwo * Weight_Daily])
mean(cbind(M,x1,x2))
hist(x1)
min(x1)
min(x2)
max(x2)
max(x1)
mean(x1)
mean(x2)
min(M)
max(M)
dim(M)
abs(M *  X$Weight_Daily)
hist(abs(M *  X$Weight_Daily))
hist(abs(M *  X$Weight_Daily),100)
hist(abs(M *  X$Weight_Daily),1000)
mean(abs(M *  X$Weight_Daily))
mean(cbind(abs(M *  X$Weight_Daily),x1,x2)
)
mean(x1)
mean(x2)
rowSums(abs(M *  X$Weight_Daily)
)
mean(rowSums(abs(M *  X$Weight_Daily)))
mean(cbind(abs(M *  X$Weight_Daily),x1,x2)
)
M
sum9
sum(is.na(M))
sum(is.na(X))
sum(is.na(X[,Ret_3]))
sum(is.na(X[,Ret_31]))
sum(is.na(X[,Ret_311]))
sum(is.na(X[,Ret_131]))
sum(is.na(X[,Ret_121]))
sum(is.na(X[,Ret_120]))
sum(is.na(X[,Ret_119]))
sum(is.na(X[,Ret_118]))
sum(is.na(X[,Ret_1100]))
sum(is.na(X[,Ret_100]))
sum(is.na(X[,Ret_50]))
X[,lapply(.SD, function(x)sum(is.na(x))]
X[,lapply(.SD, function(x)sum(is.na(x)))]
X[,plot(lapply(.SD, function(x)sum(is.na(x))))]
X[,plot(unlist(lapply(.SD, function(x)sum(is.na(x)))))]
dim(X)
names(X)
X[,plot(unlist(lapply(.SD, function(x)sum(is.na(x))))), .SDcols= cols]
X$Weight_Daily
names(X)
tc
length(tc)
tc
tc
tc
length(tc)
dim(M)
M
cols
length(cols)
cols[119]
cols[120]
cols[120:]
cols[120:180]
cols[120:179]
tc = cols[120:179]
cols = paste('Ret',2:180,sep ='_')
tc = cols[120:179]
M = as.matrix(X[,tc,with=F])
dim(M)
az = mean(M * X$Weight_Intraday )
as
az
az = mean(abs(M * X$Weight_Intraday ))
az
M
unlist(M)
class(unlist(M))
class(as.vector(M))
length(as.vector(M))
mean(as.vector(M))
mean(as.vector(abs(M)))
cols = paste('Ret',121:180,sep ='_')
M = as.matrix(X[,cols,with=F])
cols
z = matrix(1,nrow = 5, ncol=2)
z
z* 1:5
z* 1:2
length(X$Weight_Intraday)
dim(M)
M = as.matrix(X[,cols,with=F])
dim(M)
az = mean(abs(M * X$Weight_Intraday ))
az
40000*60
min(X$Weight_Daily)
min(X$Weight_Intraday)
min(X$Weight_Daily*.8)
min(X$Weight_Daily)
X$Ret_PlusOne* X$Weight_Daily
sum(abs(X$Ret_PlusOne* X$Weight_Daily))
mean(abs(X$Ret_PlusOne* X$Weight_Daily))
mean(abs(X$Ret_PlusTwo* X$Weight_Daily))
(abs(X$Ret_PlusTwo* X$Weight_Daily))/40000
v1 = abs(X$Ret_PlusTwo* X$Weight_Daily)
v1 = abs(X$Ret_PlusOne* X$Weight_Daily)
v2 = abs(X$Ret_PlusTwo* X$Weight_Daily)
mean(v1,v2)
mean(c(v1,v2))
az = abs(M * X$Weight_Intraday )
mean(c(az,v1,v2))
names(X)
cumsum(c(1:4,NA,10))
cumsum(1:4)
cumsum(c(1:4,NA,10))
?cumsum
table(X$Feature_16)
table(X$Feature_16,useNA = 'al')
require(data.table)
X = fread('~/Downloads/train.csv')
cols = paste('Ret',121:180,sep ='_')
M = as.matrix(X[,cols,with=F])
start = proc.time()[3]
z = cor(t(M))
proc.time()[3] - start
dim(M)
dim(z)
max(z)
min(z)
40000*40000
hist(z,1000)
hist(z[1:1000,1:1000])
hist(z[1:1000,1:1000],1000)
hist(z[1:2000,1:2000],1000)
hist(z[1:3000,1:3000],1000)
gc()
acf(M[1,])
acf(M[2,])
acf(M[3,])
?acf
ccf(M[1,],M[2,])
ccf(M[1,],M[3,])
?ccf
ccf(M[1,],M[3,], ylab = 'xcorr')
?ccf
ccf(M[1,],M[3,], ylab = 'xcorr', plot=F)
ccf(M[1,],M[3:4,], ylab = 'xcorr', plot=F)
ccf(M[1,],M[44,], ylab = 'xcorr', plot=F)
ccf(M[1,],M[44,], ylab = 'xcorr', plot=T)
ccf(M[13,],M[44,], ylab = 'xcorr', plot=T)
plot(X$Weight_Daily, X$Ret_PlusOne, cex = .1, col = 'red')
plot(log(X$Weight_Daily), X$Ret_PlusOne, cex = .1, col = 'red')
plot(log(X$Weight_Daily), X$Ret_PlusOne, cex = .1, col = 'red', pch =19)
require(ggplot2)
qplot(log(X$Weight_Daily), X$Ret_PlusOne, cex = .1, col = 'red', pch =19)
qplot(log(X$Weight_Daily), X$Ret_PlusOne)
qplot(log(X$Weight_Daily), X$Ret_PlusOne,log = 'x')
qplot(log(X$Weight_Daily), X$Ret_PlusOne,ylim = c(-.5,.5))
qplot(log(X$Weight_Daily), X$Ret_PlusOne,ylim = c(-.25,.25))
qplot(log(X$Weight_Daily), X$Ret_PlusOne,ylim = c(-.25,.25),cex = .5)
qplot(log(X$Weight_Daily), X$Ret_PlusOne,ylim = c(-.25,.25),cex = .01)
?qplot
qplot(log(X$Weight_Daily), X$Ret_PlusOne,ylim = c(-.25,.25),size = .5)
?qplot
?qplot
qplot(log(X$Weight_Daily), X$Ret_PlusOne,ylim = c(-.25,.25),size = .5) + geom_smooth()
qplot(log(X$Weight_Daily), X$Ret_PlusOne,ylim = c(-.25,.25),size = .1)
qplot(log(X$Weight_Daily), X$Ret_PlusOne,ylim = c(-.25,.25),size = I(.1))
qplot(log(X$Weight_Daily), X$Ret_PlusOne,ylim = c(-.25,.25),size = I(.5))
qplot(log(X$Weight_Daily), X$Ret_PlusOne,ylim = c(-.25,.25),size = I(.6))
qplot(log(X$Weight_Daily), X$Ret_PlusOne,ylim = c(-.2,.2),size = I(.6))
qplot(log(X$Weight_Daily), X$Ret_PlusOne,ylim = c(-.2,.2),size = I(1))
qplot(log(X$Weight_Daily), X$Ret_PlusOne,ylim = c(-.2,.2),size = I(.7))
qplot(log(X$Weight_Daily), X$Ret_PlusOne,ylim = c(-.1,.1),size = I(.7))
hist(X$Ret_MinusTwo,1000)
hist(X$Ret_MinusOne,1000)
plot(X$Ret_MinusOne,X$Ret_MinusTwo)
plot(X$Ret_PlusOne,X$Ret_MinusTwo)
plot(X$Ret_PlusOne,X$Ret_PlusTwo)
plot(X$Ret_PlusOne,X$Ret_PlusTwo,pch = 19, cex = .1)
acf(t(M[1:4,])
)
acf(t(M[1:4,],plot=F)
)
?acf
acf(t(M[1:4,]),plot=F)
acf(t(M[1:4,]),type = 'cov',plot=F)
A = acf(t(M[1:4,]),type = 'cov',plot=F)
type(A)
class(A)
dim(A)
names(A)
A$acf
class(A$acf)
dim(A$acf)
dim(M)
apply(M,1,mean)
hist(apply(M,1,mean))
hist(apply(M,1,mean),1000)
names(A)
A$n.used
dim(A$acf)
A = acf(t(M[1:50,]),type = 'cov',plot=F)
dim(A)
dim(A$acf)
dim(M[1:50,])
dim(t(M[1:50,]))
dim(M[1:100,])
dim(M<)
dim(M)
dim(t(M[1:100,]))
A = acf(t(M[1:100,]),type = 'cov',plot=F)
?acf
A = ccf(t(M[1:100,]), t(M[1:100,]),type = 'cov',plot=F)
A = acf(t(M[1:100,]),type = 'cov',plot=F)
dim(t(M[1:100,]))
A = acf(t(M[1:100,]),type = 'cov',plot=F, max.lag = 10)
A = acf(t(M[1:100,]),type = 'cov',plot=F, lag.max  = 10)
dim(A$acf)
A = acf(t(M[1:50,]),type = 'cov',plot=F, lag.max  = 10)
dim(A)
dim(A$acf)
A
dim(A$acf)
A[1,,]
A$acf[1,,]
dim(A$acf[1,,])
dim(A$acf)
ts = t(M[1:100,])
dim(ts)
ts = t(M[1:10,])
ts
dim(ts)
colnames(ts)
A = acf(ts)
A
names(A)
A$lag
dim(A$acf)
dim(ts)
dim(ts)
A = acf(ts, plot = F, lag.max = 5)
dim(A$acf)
A$acf
A$snames
dim(Ts)
dim(ts)
colnames(ts) <- paste0('ts_',1:10)
colnames(ts)
A = acf(ts, plot = F, lag.max = 5)
A$series
A$snames
A[1,,]
A$acf[1,,]
dim(A$acf)
A$lag
A[1,]
A[1,]
A[1,]
A[1,,]
A$acf[1,,]
A$acf[2,,]
A$acf[1,,]
A$lag[1,,]
A$lag[2,,]
A$lag[3,,]
A$lag[4,,]
A$lag[5,,]
A$lag[6,,]
A$lag[7,,]
A$lag[6,,]
acf
install.packages("quantreg")
require(data.table)
require(quantreg)
train = fread('~/Downloads/train.csv')
x_cols = paste('Ret',2:120,sep ='_')
y_cols = paste('Ret',121:180,sep ='_')
train_idx <- sample(x = 40000, size = 30000)
X <- t(as.matrix(train[train_idx,x_cols,with=F]))
X[is.na(X)] <- 0
y <- t(as.matrix(train[-train_idx,x_cols,with=F]))
y[is.na(y)] <- 0
r <-  cor(X,y)
p <- X %*% r
dim(p)
dim(y)
as.numeric(y)
as.numeric(p)
cor(as.numeric(p),as.numeric(y))
rqmodel1 <- rq(as.numeric(p)~as.numeric(y))
rqmodel1
y
rqmodel1 <- rq(p[1:1000] y[1:1000])
rqmodel1 <- rq(p[1:1000] ~ y[1:1000])
rqmodel1
mean(abs(p))
mean(abs(p))/mean(abs(y))
rqmodel1 <- rq(p[1:10000] ~ y[1:10000])
rqmodel1
names(rqmodel1)
?rq
rqmodel1$tau
summary(rqmodel1)
rqmodel1 <- rq(p[1:20000] ~ y[1:20000])
summary(rqmodel1)
rqmodel1 <- rq(p[1:30000] ~ y[1:30000])
summary(rqmodel1)
rqmodel1 <- rq(p[1:40000] ~ y[1:40000])
summary(rqmodel1)
rqmodel1 <- rq(p[1:50000] ~ y[1:50000])
summary(rqmodel1)
1/238
1/250
1/260
1/2228
rqmodel1 <- rq(p[1:90000] ~ y[1:90000])
summary(rqmodel1)
1/225
rqmodel1 <- rq(y[1:90000] ~ p[1:90000])
summary(rqmodel1)
1/.00262
rqmodel1 <- rq(y[1:100000] ~ p[1:100000])
1/.00262
summary(rqmodel1)
plot(p0[1:5000],y[1:5000],pch=19,col='blue',cex=.3)
plot(p[1:5000],y[1:5000],pch=19,col='blue',cex=.3)
abline(rqmodel1)
?"matrix"
matrix(data = NA_character_, nrow= 10)
M=matrix(data = NA_character_, nrow= 10)
x <- character(100)
object.size(x)
x[1]
x[1] <- 'gh'
object.size(x)
?"character"
a0 <- 11/999
a1 <- as.character(a0)
a1
a0
object.size(a0)
object.size(a1)
require(xgboost)
source('~/.active-rstudio-document')
print(xgb.dump(bst))
require(xgboost)
source('~/.active-rstudio-document')
xgb.importance(model = bst)
require(xgboost)
data(agaricus.train, package='xgboost')
train <- agaricus.train
groups <- c(rep(100, 65), 13)
groups
train
train$label
train$data
dim(train$data)
groups <- c(rep(100, 65), 13)
names(data)
names(train$data)
colnames(train$data)
train$label
table(train$label)
dtrain <- xgb.DMatrix(data = train$data, label = train$label, group = groups)
bst <- xgboost(dtrain, max.depth = 2, eta = .1, nround = 10, nthread = 2, objective = 'rank:pairwise')
p <- predict(bst, dtrain)
p
dim(p)
p[1:100]
plot(p[1:100])
plot(sort(p[1:100]))
bst <- xgboost(dtrain, max.depth = 2, eta = .1, nround = 100, nthread = 2, objective = 'rank:pairwise')
p <- predict(bst, dtrain)
plot(sort(p[1:100]))
p[1:10]
train$label[1:10]
?xgb.train
plot(p[1:100])
plot(p[1:100], col = train$label+1)
library("memoise", lib.loc="/usr/local/lib/R/3.2/site-library")
x <- runif(10000)
system.time(log(x))
x <- runif(1e7)
system.time(log(x))
x <- runif(4e7)
system.time(log(x))
x <- runif(1e8)
system.time(log(x))
a <- function(x){log(x)}
memA <- memoise(a)
replicate(5, runif(2))
a <- function(x){runif(n)}
memA <- memoise(a)
replicate(5, a(2))
a <- function(n){runif(n)}
memA <- memoise(a)
a <- function(n){runif(n)}
memA <- memoise(a)
replicate(5, a(2))
replicate(5, memA(2))
detach("package:memoise", unload=TRUE)
library("data.table", lib.loc="/usr/local/lib/R/3.2/site-library")
require(data.table)
setwd("~/repos/scharf-personal/rossman")
setwd("~/repos/scharf-personal/rossman")
X <- fread('train.csv')
dim(X)
sapply(X,class)
saveRDS(X,'X')
sapply(X,class)
X[,Date:=as.Date(Date)]
X$StateHoliday
saveRDS(X,'X')
