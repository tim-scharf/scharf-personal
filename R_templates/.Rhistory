.05^2
.15^2
mean(.15^2,.05^2)
sqrt(mean(.15^2,.05^2))
(mean(.15^2,.05^2)
)
plot(sqrt(x))
x  = seq(0,2,length.out=50)
plot(x,sqrt(x))
plot(x,(x)^2)
points(x,sqrt(x))
abline(0,a)
abline(0,1)
.09
.14
.09^2 + .14^2
mean(.09^2 + .14^2)
mean(.14,.09)
mean(.14,.09)^2
mean(.14,.09)
.14^2
.9**2
.9**2-.9
.8**2-.8
plot(x)
plot(x^2 - x)
plot(x,x^2 - x)
10^2
plot(x,sqrt(x) - x)
.1
.1^2
Sys.getenv()
install.packages("/tmp/Rtmpy08kUN/downloaded_packages/gputools_0.28.tar.gz", repos = NULL, type = "source")
Sys.getenv()
install.packages("/tmp/Rtmpy08kUN/downloaded_packages/gputools_0.28.tar.gz", repos = NULL, type = "source")
Sys.getenv()
install.packages("/tmp/Rtmpy08kUN/downloaded_packages/gputools_0.28.tar.gz", repos = NULL, type = "source")
Sys.getenv()
library("Rcpp", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("/tmp/Rtmpy08kUN/downloaded_packages/gputools_0.28.tar.gz", repos = NULL, type = "source")
Sys.getenv()
require(data.table)
require(xgboost)
require(Metrics)
model_dir = 'xgb_pairwise/'
in_file = 'Z'
source('funx.R')
X  <-  train[readRDS(in_file)]
data_cols <- names(X)[-c(1,2)]
train_idx <- which(!is.na(X$outcome))
y  <-  X[train_idx,outcome]
test_id <- X[-train_idx,bidder_id]
saveRDS(test_id,'test_id')
gc()
## data orgainze
Xtrain <-  as.matrix(X[train_idx,data_cols,with=F])
Xtest <-   as.matrix(X[-train_idx,data_cols,with=F])
require(data.table)
require(xgboost)
require(Metrics)
model_dir = 'xgb_pairwise/'
in_file = 'Z'
source('funx.R')
library("gmatrix", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
gtest()
install.packages("gmatrix" ,
configure.args = "
--with-arch=sm_52
--with-cuda-home=/opt/cuda
--with-r-home==/opt/R"
)
install.packages("gmatrix", configure.args = "\n      --with-arch=sm_52\n      --with-cuda-home=/opt/cuda\n      --with-r-home==/opt/R")
library("gmatrix", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
gtest()
detach("package:gmatrix", unload=TRUE)
dir.create('test')
dir()
?assert
? dir.exists
model_dir = 'test_dir'
ifelse(!dir.exists(model_dir) , dir.create(model_dir), FALSE)
ifelse(  !dir.exists(model_dir) , dir.create(model_dir), FALSE)
ifelse(  !dir.exists(model_dir) , dir.create(model_dir), FALSE)
ifelse(  !dir.exists(model_dir) , dir.create(model_dir), FALSE)
?stopifnot
stopifnot(dim(Xtrain)[2]==dim(Xtest)[2],)
Xtrain <- matrix(runif(100), nrow = 10)
Xtest<- matrix(runif(200), nrow = 20)
stopifnot(dim(Xtrain)[2]==dim(Xtest)[2],)
stopifnot(dim(Xtrain)[2]==dim(Xtest)[2])
Xtest<- matrix(runif(200), nrow = 10)
stopifnot(dim(Xtrain)[2]==dim(Xtest)[2])
?stopifnot
meta_bag <- function(
Xtrain,             # This is a matrix, contains train and test data, data_cols only
Xtest,
y,                 # contains target vars
model_dir,         # we will make this directory if it doesn't exist
n_models,          # total model construction
worker_bee)        # function that saves a DATA structure in model_dir
{
# make directory if it doesn't exist
ifelse(  !dir.exists(model_dir) , dir.create(model_dir), FALSE)
#Train and test same number of columns
stopifnot(dim(Xtrain)[2]==dim(Xtest)[2])
for(m in 1:n_models){
cat('\n','working on model',m,'\n')
set.seed(m)
idx      <-   sample(nrow(Xtrain),ntrain)    # full bag
Xbag  <- Xtrain[idx,]
ybag  <- y[idx]
worker_bee(X = Xbag, y = ybag, idx = idx, m = m)   # this saves a data structure
}
}
meta_bag <- function(
Xtrain,             # This is a matrix, contains train and test data, data_cols only
Xtest,
y,                 # contains target vars
model_dir,         # we will make this directory if it doesn't exist
n_models,          # total model construction
worker_bee)        # function that saves a DATA structure in model_dir
{
# make directory if it doesn't exist
ifelse(  !dir.exists(model_dir) , dir.create(model_dir), FALSE)
#Train and test same number of columns
stopifnot(dim(Xtrain)[2]==dim(Xtest)[2])
for(m in 1:n_models){
cat('\n','working on model',m,'\n')
set.seed(m)
idx      <-   sample(nrow(Xtrain),ntrain)    # full bag
Xbag  <- Xtrain[idx,]
ybag  <- y[idx]
worker_bee(X = Xbag, y = ybag, idx = idx, m = m)   # this saves a data structure
}
}
setwd("~/R_templates")
x = 1:10
x
idx = c(1,1,4,5,6,6)
x
x[idx]
x[=idx]
x[-idx]
paste('a','b'c9)
paste('a','b',9)
paste('a','b',9,sep = '_')
x <- matrix(runif,10000,nrow = 100)
x <- matrix(runif(10000),ncol = 100)
x
dim(x)
y <- sample(x = c(0,1), size = 100)
y <- sample(x = c(0,1), size = 100, replace = T)
x
y
idx <- sample(nrow(x),nrow(x), replace = T)
source('~/R_templates/xbg_binary.R', echo=TRUE)
train = matrix(runif(10000), ncol = 10)
valid = matrix(runif(10000), ncol = 10)
z <- 1:1000
x <- sample(z,length(z),replace = T)
x
length(z[x])
length(z[-x])
idx <- sample(nrow(train),nrow(train),replace = T)
m =1
y = sample(c(0,1),1000,replace = T)
NA_val =-999
require(xgboost)
?require
require(xgboost)
require(Matrix)
dtrain   <-   xgb.DMatrix(train[idx,]    ,missing = NA_val, label = y[idx])
dvalid   <-   xgb.DMatrix(valid[-idx,]   ,missing = NA_val, label = y[-idx])
getinfo(dtrain,'date')
getinfo(dtrain,'data')
getinfo(dtrain,'label')
?getinfo
getinfo(dtrain,'basemargin')
getinfo(dtrain,'base_margin')
getinfo(dtrain,'nrow')
dvalid   <-   xgb.DMatrix(valid[-idx,]   ,missing = NA_val, label = y[-idx])
dtest    <-   xgb.DMatrix(test           ,missing = NA_val)
test <- matrix(runif(10000,nrow = 10))
test <- matrix(runif(10000),nrow = 10))
test <- matrix(runif(10000),nrow = 10)
test
dtest    <-   xgb.DMatrix(test           ,missing = NA_val)
param = list(
booster          =  'gbtree',
#lambda           =  .001,
#alpha            =  .001,
objective        =  'reg:linear',
eval_metric      =  'rmse',
max.depth        =   sample(3:10,1),
eta              =   runif (1,.1,.3),
gamma            =   runif (1,0,2),
min_child_weight =   sample(0:10,1),
subsample        =   runif (1,.4,.6),
colsample_bytree =   runif (1,.6,.9),
nrounds          =   2000
)
model  <-    xgb.train(
early_stop_round  = 10,
watchlist         = list( valid_err = dvalid),
printEveryN       = 5,
params            = param,
data              = dtrain,
nrounds           = param$nrounds,
verbose= 1)
?xgb.train
param = list(
booster          =  'gbtree',
#lambda           =  .001,
#alpha            =  .001,
objective        =  'binary_logistic',
eval_metric      =  'logloss',
max.depth        =   sample(3:10,1),
eta              =   runif (1,.1,.3),
gamma            =   runif (1,0,2),
min_child_weight =   sample(0:10,1),
subsample        =   runif (1,.4,.6),
colsample_bytree =   runif (1,.6,.9),
nrounds          =   2000
)
model  <-    xgb.train(
early_stop_round  = 10,
watchlist         = list( valid_err = dvalid),
printEveryN       = 5,
params            = param,
data              = dtrain,
nrounds           = param$nrounds,
verbose= 1)
param = list(
booster          =  'gbtree',
#lambda           =  .001,
#alpha            =  .001,
objective        =  'binary:logistic',
eval_metric      =  'logloss',
max.depth        =   sample(3:10,1),
eta              =   runif (1,.1,.3),
gamma            =   runif (1,0,2),
min_child_weight =   sample(0:10,1),
subsample        =   runif (1,.4,.6),
colsample_bytree =   runif (1,.6,.9),
nrounds          =   2000
)
model  <-    xgb.train(
early_stop_round  = 10,
watchlist         = list( valid_err = dvalid),
printEveryN       = 5,
params            = param,
data              = dtrain,
nrounds           = param$nrounds,
verbose= 1)
y[idx]
y[-idx]
model  <-    xgb.train(
early_stop_round  = 10,
watchlist         = list( valid_err = dvalid),
printEveryN       = 10,
params            = param,
data              = dtrain,
nrounds           = param$nrounds,
verbose= 1)
param = list(
booster          =  'gbtree',
#lambda           =  .001,
#alpha            =  .001,
objective        =  'binary:logistic',
eval_metric      =  'logloss',
max.depth        =   3,
eta              =   .01,
gamma            =   0,
min_child_weight =   0,
subsample        =   runif (1,.4,.6),
colsample_bytree =   runif (1,.6,.9),
nrounds          =   2000
)
model  <-    xgb.train(
early_stop_round  = 10,
watchlist         = list( valid_err = dvalid),
printEveryN       = 10,
params            = param,
data              = dtrain,
nrounds           = param$nrounds,
verbose= 1)
model  <-    xgb.train(
early.stop.round  = 10,
watchlist         = list( valid_err = dvalid),
printEveryN       = 10,
params            = param,
data              = dtrain,
nrounds           = param$nrounds,
verbose= 1)
model  <-    xgb.train(
early.stop.round  = 10,
watchlist         = list( valid_err = dvalid),
print.every.n       = 10,
params            = param,
data              = dtrain,
nrounds           = param$nrounds,
verbose = 1)
model
model  <-    xgb.train(
early.stop.round  = 10,
watchlist         = list( valid_err = dvalid),
print.every.n     = 5,
params            = param,
data              = dtrain,
nrounds           = param$nrounds,
verbose = 1)
DATA = list(param    = param,
idx      = idx,
P_valid  = predict(model, newdata = dvalid, ntreelimit = model$bestInd),
P_test   = predict(model, newdata = dtest,  ntreelimit = model$bestInd) ,
cv_score = model$bestScore,
rounds   = model$bestInd,
m        = m)
DATA$param
DATA$idx
object.size(y)
DATA$cv_score
DATA$rounds
DATA$m
model_dir = 'test_dir'
ifelse(  !dir.exists(model_dir) , dir.create(model_dir), FALSE)
stopifnot(dim(Xtrain)[2]==dim(Xtest)[2])
cat('\n','working on model',m,'\n')
set.seed(m)
idx        <- sample(nrow(Xtrain),ntrain)    # full bag indexes
idx        <- sample(nrow(Xtrain),nrow(Xtrain) , replace = T)    # full bag indexes
X = matrix(runif(10000), ncol = 10)
y = X[,1] + X[,9] + runif(1000)
y
plot(X[,1])
plot(X[,1],y)
plot(X[,2],y)
plot(X[,9],y)
Xtrain = X[1:800,]
plot(y)
y = y>(mean(y))
y
as.integer(y)
y = as.integer(y)
y
Xtest = X[801,1000]
Xtest = X[801:1000,1]
Xtest = X[801:1000,]
y = y[1:800,]
y = y[1:800]
model_dir = 'test_dir/'
n_models = 100
ifelse(  !dir.exists(model_dir) , dir.create(model_dir), FALSE)
stopifnot(dim(Xtrain)[2]==dim(Xtest)[2])
cat('\n','working on model',m,'\n')
m = 1
idx        <- sample(nrow(Xtrain),nrow(Xtrain) , replace = T)    # full bag indexes
require(xgboost)
require(Matrix)
# xgb data structures
dtrain   <-   xgb.DMatrix(Xtrain[idx,]    ,missing = NA_val, label = y[idx])
NA_val  =  -999
require(xgboost)
require(Matrix)
# xgb data structures
dtrain   <-   xgb.DMatrix(Xtrain[idx,]    ,missing = NA_val, label = y[idx])
dvalid   <-   xgb.DMatrix(Xtrain[-idx,]   ,missing = NA_val, label = y[-idx])
dtest    <-   xgb.DMatrix(Xtest           ,missing = NA_val)
param = list(
booster          =  'gbtree',
#lambda           =  .001,
#alpha            =  .001,
objective        =  'binary:logistic',
eval_metric      =  'logloss',
max.depth        =   3,
eta              =   .01,
gamma            =   0,
min_child_weight =   0,
subsample        =   runif (1,.4,.6),
colsample_bytree =   runif (1,.6,.9),
nrounds          =   2000
)
model  <-    xgb.train(
early.stop.round  = 10,
watchlist         = list( valid_err = dvalid),
print.every.n     = 5,
params            = param,
data              = dtrain,
nrounds           = param$nrounds,
verbose = 1)
DATA = list(param    = param,
idx      = idx,
P_valid  = predict(model, newdata = dvalid, ntreelimit = model$bestInd),
P_test   = predict(model, newdata = dtest,  ntreelimit = model$bestInd) ,
cv_score = model$bestScore,
rounds   = model$bestInd,
m        = m)
P_valid
DATA$P_valid
plot(DATA$P_valid)
plot(DATA$P_valid,y[-idx])
saveRDS(DATA , file = file.path(model_dir, paste('DATA',cv_score,sep='_')))
saveRDS(DATA , file = file.path(model_dir, paste('DATA',m,DATA$cv_score,sep='_')))
source('~/R_templates/xbg_binary.R', echo=TRUE)
worker_bee = xgb_binary
worker_bee()
worker_bee = xgb_binary()
xgb_binary()
source('~/R_templates/xbg_binary.R', echo=TRUE)
xgb_binary(Xtrain,Xtest,idx,2,y)
D <- readRDS('test_dir/DATA_2_0.435439')
names(D)
D$idx
source('~/R_templates/xbg_binary.R', echo=TRUE)
xgb_binary(Xtrain,Xtest,idx,4,y)
DATA
source('~/R_templates/meta_bag.R', echo=TRUE)
source('~/R_templates/meta_bag.R', echo=TRUE)
source('~/R_templates/xbg_binary.R', echo=TRUE)
meta_bag( Xtrain, Xtest, y, 'new_models', 20, xgb_binary)
source('~/R_templates/meta_bag.R', echo=TRUE)
source('~/R_templates/meta_bag.R', echo=TRUE)
meta_bag( Xtrain, Xtest, y, 'new_models', 20, xgb_binary)
source('~/R_templates/meta_bag.R', echo=TRUE)
meta_bag( Xtrain, Xtest, y, 'new_models', 20, xgb_binary)
rm(model_dir)
source('~/R_templates/xbg_binary.R', echo=TRUE)
source('~/R_templates/xbg_binary.R', echo=TRUE)
xgb_binary(Xtrain,Xtest, y, idx, m,)
xgb_binary(Xtrain,Xtest, y, idx, m, 'new_models')
source('~/R_templates/meta_bag.R', echo=TRUE)
source('~/R_templates/xbg_binary.R', echo=TRUE)
meta_bag( Xtrain, Xtest, y, 'new_models_2', 20, xgb_binary)
source('~/R_templates/meta_bag.R', echo=TRUE)
source('~/R_templates/xbg_binary.R', echo=TRUE)
meta_bag( Xtrain, Xtest, y, 'new_models_2', 20, xgb_binary)
meta_bag
View(meta_bag)
View(xgb_binary)
meta_bag( Xtrain, Xtest, y, 'new_models_0', 20, xgb_binary)
meta_bag( Xtrain, Xtest, y, 'new_models_1', 20, xgb_binary)
meta_bag( Xtrain, Xtest, y, 'new_models_0', 20, xgb_binary)
DATA
z <- sort(list.files('new_models_0/'))
z
z <- sort(list.files('new_models_0/',full.names = T))
z
files <- sort(list.files('new_models_0/',full.names = T))
files <- sort(list.files(model_dir,full.names = T))
model_dir = 'new_models_0/'
files <- sort(list.files(model_dir,full.names = T))
D     <- lapply(files0,readRDS)
files <- sort(list.files(model_dir,full.names = T))
D     <- lapply(files,readRDS)
n     <- length(D)
idx_list <- lapply(1:n,function(i) setdiff(1:length(y),D[[i]]$idx))
length(idx_list)
idx_list[1]
idx_list[]]1
idx_list[[1]]
pred <- numeric(length = length(y))
k    <- numeric(length = length(y))
obag_pred <- numeric(length = length(y))
k         <- numeric(length = length(y))
pred <- numeric(length = length(y))
pred <-     numeric(length = length(y))
k    <- numeric(length = length(y))
for(j in 1:n){
idx <- idx_list[[j]]
pred[idx] <- pred[idx]  +   D[[j]]$P_valid
k[idx]    <- k[idx] + 1
}
k
hist(k)
ploT(kj)
plot(k)
pred
ploT(pred)
plot(pred)
plot(pred/k)
plot(pred/k,y)
plot(pred/k,col = y+1)
plot(pred/k,col = y+1,pch = 19)
pred
plot(sort(pred))
pred
source('~/R_templates/make_obag.R', echo=TRUE)
make_obag(y,model_dir = model_dir)
source('~/R_templates/make_obag.R', echo=TRUE)
make_obag(y,model_dir = model_dir)
plot(make_obag(y,model_dir = model_dir))
files = sort(list.files(model_dir,  full.names = T))
y_hat   <- lapply(  files,  function(x)readRDS(x)$P_test)
preds   <- lapply(  files,  function(x)readRDS(x)$P_test)
class(preds)
preds[[1]]
length(preds)
preds   <- lapply(  files,  function(x)readRDS(x)$P_test)
preds
preds[[1]]
preds <- matrix( unlist(preds), ncol = length(preds))
prds
preds
dim(preds)
plot(preds[,1])
plot(preds[1,])
plot(preds[2,])
plot(preds[3,])
plot(preds[20,])
return(rowMeans(preds))
rowMeans(preds)
source('~/R_templates/make_test_pred.R', echo=TRUE)
